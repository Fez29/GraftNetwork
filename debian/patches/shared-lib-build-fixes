Description: Build fixes for building shared lib
 This fixes various missing dependencies and compilation flags needed for a successful shared
 library build.
 .
Author: Jason Rhinelander <jason@imaginary.ca>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2018-11-22

--- graft-1.5.1.orig/CMakeLists.txt
+++ graft-1.5.1/CMakeLists.txt
@@ -666,7 +666,7 @@ elseif(NOT MSVC)
   set(EXTRA_LIBRARIES ${RT})
 endif()
 
-list(APPEND EXTRA_LIBRARIES ${CMAKE_DL_LIBS})
+list(APPEND EXTRA_LIBRARIES ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT})
 
 option(USE_READLINE "Build with GNU readline support." ON)
 if(USE_READLINE)
--- graft-1.5.1.orig/external/db_drivers/liblmdb/CMakeLists.txt
+++ graft-1.5.1/external/db_drivers/liblmdb/CMakeLists.txt
@@ -54,3 +54,9 @@ if(${ARCH_WIDTH} EQUAL 32)
   target_compile_definitions(lmdb
     PUBLIC -DMDB_VL32)
 endif()
+set_property(TARGET lmdb APPEND PROPERTY COMPILE_FLAGS "-fPIC")
+
+set_target_properties(lmdb PROPERTIES VERSION 0)
+install(TARGETS lmdb
+    ARCHIVE DESTINATION lib/${CMAKE_LIBRARY_ARCHITECTURE}/graft
+    LIBRARY DESTINATION lib/${CMAKE_LIBRARY_ARCHITECTURE}/graft)
--- graft-1.5.1.orig/external/easylogging++/CMakeLists.txt
+++ graft-1.5.1/external/easylogging++/CMakeLists.txt
@@ -51,6 +51,13 @@ if (BUILD_GUI_DEPS)
         set(lib_folder lib)
     endif()
     install(TARGETS easylogging
-        ARCHIVE DESTINATION ${lib_folder})
+        ARCHIVE DESTINATION ${lib_folder}
+        LIBRARY DESTINATION ${lib_folder})
 endif()
+set_property(TARGET easylogging APPEND PROPERTY COMPILE_FLAGS "-fPIC")
+
+set_target_properties(easylogging PROPERTIES VERSION 0)
+install(TARGETS easylogging
+    ARCHIVE DESTINATION lib/${CMAKE_LIBRARY_ARCHITECTURE}/graft
+    LIBRARY DESTINATION lib/${CMAKE_LIBRARY_ARCHITECTURE}/graft)
 
--- graft-1.5.1.orig/src/CMakeLists.txt
+++ graft-1.5.1/src/CMakeLists.txt
@@ -94,6 +94,12 @@ function (monero_add_library name)
       FOLDER "libs")
   target_compile_definitions(${objlib}
     PRIVATE $<TARGET_PROPERTY:${name},INTERFACE_COMPILE_DEFINITIONS>)
+
+  set_property(TARGET "${name}" APPEND PROPERTY COMPILE_FLAGS "-fPIC")
+  set_target_properties("${name}" PROPERTIES VERSION 0)
+  install(TARGETS "${name}"
+    ARCHIVE DESTINATION lib/${CMAKE_LIBRARY_ARCHITECTURE}/graft
+    LIBRARY DESTINATION lib/${CMAKE_LIBRARY_ARCHITECTURE}/graft)
 endfunction ()
 
 add_subdirectory(common)
--- graft-1.5.1.orig/src/blockchain_db/CMakeLists.txt
+++ graft-1.5.1/src/blockchain_db/CMakeLists.txt
@@ -66,6 +66,7 @@ target_link_libraries(blockchain_db
     ringct
     ${LMDB_LIBRARY}
     ${BDB_LIBRARY}
+    ${Boost_CHRONO_LIBRARY}
     ${Boost_FILESYSTEM_LIBRARY}
     ${Boost_THREAD_LIBRARY}
   PRIVATE
--- graft-1.5.1.orig/src/blockchain_utilities/CMakeLists.txt
+++ graft-1.5.1/src/blockchain_utilities/CMakeLists.txt
@@ -94,6 +94,7 @@ add_dependencies(blockchain_import
 set_property(TARGET blockchain_import
 	PROPERTY
 	OUTPUT_NAME "graft-blockchain-import")
+install(TARGETS blockchain_import DESTINATION bin)
 
 monero_add_executable(blockchain_export
   ${blockchain_export_sources}
@@ -116,4 +117,5 @@ add_dependencies(blockchain_export
 set_property(TARGET blockchain_export
 	PROPERTY
 	OUTPUT_NAME "graft-blockchain-export")
+install(TARGETS blockchain_export DESTINATION bin)
 
--- graft-1.5.1.orig/src/common/CMakeLists.txt
+++ graft-1.5.1/src/common/CMakeLists.txt
@@ -82,6 +82,7 @@ target_link_libraries(common
     cncrypto
     ${UNBOUND_LIBRARY}
     ${LIBUNWIND_LIBRARIES}
+    ${Boost_CHRONO_LIBRARY}
     ${Boost_DATE_TIME_LIBRARY}
     ${Boost_FILESYSTEM_LIBRARY}
     ${Boost_SYSTEM_LIBRARY}
--- graft-1.5.1.orig/src/cryptonote_basic/CMakeLists.txt
+++ graft-1.5.1/src/cryptonote_basic/CMakeLists.txt
@@ -69,6 +69,7 @@ target_link_libraries(cryptonote_basic
   PUBLIC
     common
     cncrypto
+    ${Boost_CHRONO_LIBRARY}
     ${Boost_DATE_TIME_LIBRARY}
     ${Boost_PROGRAM_OPTIONS_LIBRARY}
     ${Boost_SERIALIZATION_LIBRARY}
--- graft-1.5.1.orig/src/cryptonote_core/CMakeLists.txt
+++ graft-1.5.1/src/cryptonote_core/CMakeLists.txt
@@ -59,6 +59,7 @@ target_link_libraries(cryptonote_core
     cncrypto
     blockchain_db
     ringct
+    ${Boost_CHRONO_LIBRARY}
     ${Boost_DATE_TIME_LIBRARY}
     ${Boost_PROGRAM_OPTIONS_LIBRARY}
     ${Boost_SERIALIZATION_LIBRARY}
--- graft-1.5.1.orig/src/supernode/CMakeLists.txt
+++ graft-1.5.1/src/supernode/CMakeLists.txt
@@ -100,6 +100,7 @@ monero_add_library(supernode
 target_link_libraries(supernode
     PUBLIC
     rpc
+    wallet
     common
     cryptonote_core
     mnemonics
--- graft-1.5.1.orig/version.cmake
+++ graft-1.5.1/version.cmake
@@ -6,7 +6,7 @@ endfunction ()
 
 file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/version")
 find_package(Git QUIET)
-if ("" STREQUAL "")
+if ("$Format:$" STREQUAL "")
   # We're in a tarball; use hard-coded variables.
   write_static_version_header("release")
 elseif (GIT_FOUND OR Git_FOUND)
